[tool.poetry]
name = "FastAPI+SQLAlchemy+Pydantic"
version = "0.1.0"
description = "Project demoing the use of FastAPI with SQLAlchemy and Pydantic"
authors = ["Jelena Cupac"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.13"
fastapi = "^0.115.12"
uvicorn = "^0.34.0"
python-json-logger = "^3.3.0"
httpx = "^0.28.1"
pydantic = "^2.11.2"
alembic = "^1.15.2"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.40"}
asyncpg = "^0.30.0"
psycopg2-binary = "^2.9.10"
python-dotenv = "^1.1.0"
pydantic-settings = "^2.8.1"
dependency-injector = "^4.46.0"


[tool.poetry.group.dev.dependencies]
pre-commit = "^4.2.0"
pytest = "^8.3.5"
pytest-cov = "^6.1.1"
pytest-asyncio = "^0.26.0"
pytest-dotenv = "^0.5.2"

[tool.mypy]
strict = true
explicit_package_bases = true
ignore_missing_imports = true
implicit_optional = true
allow_redefinition = true
disallow_subclassing_any = false
plugins = ['pydantic.mypy']

[tool.ruff]
line-length = 119
src = ["src"]
exclude=["tests/*", "scripts/*"]

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
    #### modules
    "DJ",  # django

    #### specific rules
    "B008", # perform function calls in argument defaults
    "D100", # Missing docs
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D205",
    "D212",
    "D400",
    "D401",
    "D415",
    "TD002",  # ignore missing todo author
    "TD003",  # ignore missing todo link
    "PGH003", # ignore using specific rules when ignoring type issues
    "COM812", # missing trailing comma, since it may cause conflicts when used with formatter
    "FAST001", # fast-api-redundant-response-model
    "FAST002", # fast-api-non-annotated-dependency
    "FA102", # ignore from __future__ import annotations
    "B006",
    "EM102", # allow f-string as exception
    "TRY003", # allow messages outside of the exception
]
ignore-init-module-imports = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "--cov=src",
    "--cov-report=html"
]

markers = [
    "integration: mark a test as an integration test",
]
testpaths = [ "tests" ]
env_files = [ ".env.test" ]
env_override_existing_values = 1

[tool.coverage.html]
directory = "coverage_html_report"

[tool.coverage.report]
fail_under = 80
exclude_also = [
    "pass"
]

